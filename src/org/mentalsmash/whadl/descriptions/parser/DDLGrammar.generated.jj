/* Generated by JTB 1.4.6 */


options
{
  JDK_VERSION = "1.6";
  static = false;
  // JTB_VP = "org.mentalsmash.whadl.descriptions.parser.visitor";
  // JTB_VD = "visitor";
  // JTB_NP = "org.mentalsmash.whadl.descriptions.parser.nodes";
  // JTB_ND = "nodes";
  // JTB_O = "DDLGrammar.generated.jj";
  // JTB_PRINTER = true;
}

PARSER_BEGIN(DDLParser)
package org.mentalsmash.whadl.descriptions.parser;

import org.mentalsmash.whadl.descriptions.parser.nodes.*;


public class DDLParser {}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token tok) {
    final NodeToken node = new NodeToken(tok.image.intern(), tok.kind, tok.beginLine, tok.beginColumn, tok.endLine, tok.endColumn);
    if (tok.specialToken == null)
      return node;
    final java.util.ArrayList<NodeToken> temp = new java.util.ArrayList<NodeToken>();
    Token t = tok;
    while (t.specialToken != null) {
      t = t.specialToken;
      temp.add(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
    }
    for (int i = temp.size() - 1; i >= 0; --i)
      node.addSpecial(temp.get(i));
    node.trimSpecials();
    return node;
  }
}

PARSER_END(DDLParser)

/* WHITE SPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* TEXT */
MORE :
{
  "<[[[\n" : IN_TEXT
}

/*< IN_TEXT >
SKIP :{  "\t"
}*/
<IN_TEXT>
MORE :
{
  < ~[] >
}

<IN_TEXT>
TOKEN :
{
  < TEXT : "\n]]]>" > : DEFAULT
}

/* IDENTIFIERS */
TOKEN :
{
  < IDENTIFIER : <LETTER> ( <LETTER>| <DIGIT> )* >
| < #LETTER : ["A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"] >
| < #DIGIT : ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"] >
}

Descriptions Descriptions() :
{
  // --- JTB generated node declarations ---
  EntityDescription n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  EntityDescription n2 = null;
}
{
  n0 = EntityDescription()
  (
    n2 = EntityDescription()
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new Descriptions(n0, n1); }
}

EntityDescription EntityDescription() :
{
  // --- JTB generated node declarations ---
  EntityId n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = EntityId()
  n2 = < TEXT >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  { return new EntityDescription(n0, n1); }
}

EntityId EntityId() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    { n3 = new NodeSequence(2); }
    (
      (
        n6 = "."
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n4 = new NodeChoice(n5, 0, 2); }
      |
        n8 = "#"
        { n7 = JTBToolkit.makeNodeToken(n8); }
        { n4 = new NodeChoice(n7, 1, 2); }
      )
      
    )
    { n3.addNode(n4); }
    n10 = < IDENTIFIER >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n3.addNode(n9); }
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  { return new EntityId(n0, n2); }
}
