/* Generated By:JavaCC: Do not edit this line. WhadlParserTokenManager.java */
package org.mentalsmash.whadl.parser;
import org.mentalsmash.whadl.parser.nodes.*;

/** Token Manager. */
public class WhadlParserTokenManager implements WhadlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7ffffffe00L) != 0L)
         {
            jjmatchedKind = 51;
            return 14;
         }
         return -1;
      case 1:
         if ((active0 & 0x40000000L) != 0L)
            return 14;
         if ((active0 & 0x7fbffffe00L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
            return 14;
         }
         return -1;
      case 2:
         if ((active0 & 0x20000000L) != 0L)
            return 14;
         if ((active0 & 0x7f9ffffe00L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
            return 14;
         }
         return -1;
      case 3:
         if ((active0 & 0x42961c0e00L) != 0L)
            return 14;
         if ((active0 & 0x3d09e3f000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 3;
            }
            return 14;
         }
         return -1;
      case 4:
         if ((active0 & 0x3408e3f000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 4;
            return 14;
         }
         if ((active0 & 0x901100800L) != 0L)
            return 14;
         return -1;
      case 5:
         if ((active0 & 0x2000038000L) != 0L)
            return 14;
         if ((active0 & 0x1408e07000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 5;
            }
            return 14;
         }
         return -1;
      case 6:
         if ((active0 & 0x8c10000L) != 0L)
            return 14;
         if ((active0 & 0x1400207000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 6;
            return 14;
         }
         return -1;
      case 7:
         if ((active0 & 0x1000205000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 7;
            return 14;
         }
         if ((active0 & 0x400002000L) != 0L)
            return 14;
         return -1;
      case 8:
         if ((active0 & 0x1000004000L) != 0L)
            return 14;
         if ((active0 & 0x201000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 8;
            return 14;
         }
         return -1;
      case 9:
         if ((active0 & 0x1000L) != 0L)
            return 14;
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 9;
            return 14;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 56);
      case 36:
         return jjStopAtPos(0, 54);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 45);
      case 41:
         return jjStopAtPos(0, 46);
      case 42:
         return jjStopAtPos(0, 55);
      case 43:
         return jjStopAtPos(0, 67);
      case 44:
         return jjStopAtPos(0, 39);
      case 45:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 71);
      case 47:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 58:
         return jjStopAtPos(0, 58);
      case 59:
         return jjStopAtPos(0, 40);
      case 60:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 63:
         return jjStopAtPos(0, 57);
      case 91:
         return jjStopAtPos(0, 43);
      case 93:
         return jjStopAtPos(0, 44);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400241000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4000804000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x120000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x18000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2000580000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x86000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x800002c00L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 41);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 42);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 61:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 62:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4104000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2008018000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10020000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000c00L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x620241000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x402000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 14);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 124:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x801000c00L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2100000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x218200L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x600021000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000000L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 14);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x1010800000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80004000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x18000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 14);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 14);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 14);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 14);
         return jjMoveStringLiteralDfa4_0(active0, 0x3000800000L);
      case 104:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 14);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 14);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x9000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 116:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 14);
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400100800L);
      case 121:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x408002000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 14);
         break;
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 14);
         return jjMoveStringLiteralDfa5_0(active0, 0x38000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x401000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 14);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 14);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 14);
         return jjMoveStringLiteralDfa6_0(active0, 0x802000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 114:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000200000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 14);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 14);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000006000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x201000L);
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 14);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 14);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 14);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 14);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 14);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 12, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(10, 21, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 48)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 48 && kind > 48)
                     kind = 48;
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 5:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 7:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 8:
                  if (curChar == 34 && kind > 50)
                     kind = 50;
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(14);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 5:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 6:
                  if (curChar == 92)
                     jjAddStates(7, 9);
                  break;
               case 7:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 14:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(14);
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   5, 6, 8, 5, 6, 10, 8, 7, 9, 11, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\141\162\155\171", 
"\165\156\151\164", "\165\156\151\164\163", "\143\157\156\144\151\164\151\157\156\163", 
"\165\160\147\162\141\144\145\163", "\145\161\165\151\160\155\145\156\164", "\155\145\155\142\145\162", 
"\155\145\155\142\145\162\163", "\154\151\156\153\145\144", "\143\157\163\164", "\163\154\157\164", 
"\163\154\157\164\163", "\143\157\155\160\157\163\151\164\151\157\156", 
"\163\160\145\143\151\141\154", "\145\170\164\145\156\144\163", "\142\165\151\154\144", "\164\171\160\145", 
"\164\141\153\145", "\162\145\160\154\141\143\145", "\167\151\164\150", "\146\157\162", 
"\157\162", "\164\162\165\145", "\146\141\154\163\145", "\156\157\156\145", 
"\143\157\156\164\141\151\156\163", "\165\156\151\157\156", "\151\156\164\145\162\163\145\143\164", 
"\163\145\154\145\143\164", "\145\141\143\150", "\54", "\73", "\173", "\175", "\133", "\135", "\50", 
"\51", "\55\76", null, null, null, null, null, null, "\44", "\52", "\43", "\77", 
"\72", "\174\174", "\46\46", "\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", 
"\53", "\55", "\57", "\41", "\56", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffcdfffffffffe01L, 0xffL, 
};
static final long[] jjtoSkip = {
   0x13eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x100L, 0x0L, 
};
static final long[] jjtoMore = {
   0xc0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[15];
private final int[] jjstateSet = new int[30];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public WhadlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public WhadlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 15; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
