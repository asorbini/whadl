/* Generated By:JavaCC: Do not edit this line. WhadlParserConstants.java */
package org.mentalsmash.whadl.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface WhadlParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT = 8;
  /** RegularExpression Id. */
  int ARMY = 9;
  /** RegularExpression Id. */
  int UNIT = 10;
  /** RegularExpression Id. */
  int UNITS = 11;
  /** RegularExpression Id. */
  int CONDITIONS = 12;
  /** RegularExpression Id. */
  int UPGRADES = 13;
  /** RegularExpression Id. */
  int EQUIPMENT = 14;
  /** RegularExpression Id. */
  int MEMBER = 15;
  /** RegularExpression Id. */
  int MEMBERS = 16;
  /** RegularExpression Id. */
  int LINKED = 17;
  /** RegularExpression Id. */
  int COST = 18;
  /** RegularExpression Id. */
  int SLOT = 19;
  /** RegularExpression Id. */
  int SLOTS = 20;
  /** RegularExpression Id. */
  int COMPOSITION = 21;
  /** RegularExpression Id. */
  int SPECIAL = 22;
  /** RegularExpression Id. */
  int EXTENDS = 23;
  /** RegularExpression Id. */
  int BUILD = 24;
  /** RegularExpression Id. */
  int TYPE = 25;
  /** RegularExpression Id. */
  int TAKE = 26;
  /** RegularExpression Id. */
  int REPLACE = 27;
  /** RegularExpression Id. */
  int WITH = 28;
  /** RegularExpression Id. */
  int FOR = 29;
  /** RegularExpression Id. */
  int OR = 30;
  /** RegularExpression Id. */
  int TRUE = 31;
  /** RegularExpression Id. */
  int FALSE = 32;
  /** RegularExpression Id. */
  int NONE = 33;
  /** RegularExpression Id. */
  int CONTAINS = 34;
  /** RegularExpression Id. */
  int UNION = 35;
  /** RegularExpression Id. */
  int INTERS = 36;
  /** RegularExpression Id. */
  int SELECT = 37;
  /** RegularExpression Id. */
  int EACH = 38;
  /** RegularExpression Id. */
  int COMMA = 39;
  /** RegularExpression Id. */
  int SEMICOLON = 40;
  /** RegularExpression Id. */
  int LCP = 41;
  /** RegularExpression Id. */
  int RCP = 42;
  /** RegularExpression Id. */
  int LB = 43;
  /** RegularExpression Id. */
  int RB = 44;
  /** RegularExpression Id. */
  int LP = 45;
  /** RegularExpression Id. */
  int RP = 46;
  /** RegularExpression Id. */
  int ARROW = 47;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 48;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 49;
  /** RegularExpression Id. */
  int STRING_LITERAL = 50;
  /** RegularExpression Id. */
  int IDENTIFIER = 51;
  /** RegularExpression Id. */
  int LETTER = 52;
  /** RegularExpression Id. */
  int DIGIT = 53;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*\"",
    "<token of kind 7>",
    "\"*/\"",
    "\"army\"",
    "\"unit\"",
    "\"units\"",
    "\"conditions\"",
    "\"upgrades\"",
    "\"equipment\"",
    "\"member\"",
    "\"members\"",
    "\"linked\"",
    "\"cost\"",
    "\"slot\"",
    "\"slots\"",
    "\"composition\"",
    "\"special\"",
    "\"extends\"",
    "\"build\"",
    "\"type\"",
    "\"take\"",
    "\"replace\"",
    "\"with\"",
    "\"for\"",
    "\"or\"",
    "\"true\"",
    "\"false\"",
    "\"none\"",
    "\"contains\"",
    "\"union\"",
    "\"intersect\"",
    "\"select\"",
    "\"each\"",
    "\",\"",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"->\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"$\"",
    "\"*\"",
    "\"#\"",
    "\"?\"",
    "\":\"",
    "\"||\"",
    "\"&&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"!\"",
    "\".\"",
  };

}
