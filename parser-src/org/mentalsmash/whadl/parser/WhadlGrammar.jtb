options
{
  JDK_VERSION = "1.6";
  static = false;
  JTB_VP="org.mentalsmash.whadl.parser.visitor";
  JTB_VD="visitor";
  JTB_NP="org.mentalsmash.whadl.parser.nodes";
  JTB_ND="nodes";
  JTB_O="WhadlGrammar.generated.jj";
  JTB_PRINTER = true;
  JTB_IA = true;
  JTB_JD = true;
  JTB_TK = true;
  JTB_W = false; 
}

PARSER_BEGIN(WhadlParser)
package org.mentalsmash.whadl.parser;

public class WhadlParser
{
  
}

PARSER_END(WhadlParser)

/* WHITE SPACES */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
   "/*" : IN_COMMENT
}

<IN_COMMENT>
MORE :
{
  < ~[] >
}

<IN_COMMENT>
SPECIAL_TOKEN :
{
  <COMMENT: "*/" > : DEFAULT
}

/* RESERVED WORDS */

TOKEN : 
{
  < ARMY : "army" >
| < UNIT : "unit" >
| < UNITS : "units" >
| < CONDITIONS : "conditions" >
| < UPGRADES : "upgrades" >
| < EQUIPMENT : "equipment" >
| < MEMBER : "member" >
| < MEMBERS : "members" >
| < LINKED : "linked" >
| < COST : "cost" >
| < SLOT : "slot" >
| < SLOTS : "slots" >
| < COMPOSITION : "composition" >
| < SPECIAL : "special" >
| < EXTENDS : "extends" >
| < BUILD : "build" >
| < TYPE : "type" >
| < TAKE : "take" >
| < REPLACE : "replace" >
| < WITH : "with" >
| < FOR : "for" >
| < OR : "or" >
| < TRUE : "true" >
| < FALSE : "false" >
| < NONE : "none" >
| < CONTAINS : "contains" >
| < UNION : "union" >
| < INTERS : "intersect" >
| < SELECT : "select" >
| < EACH : "each" >
| < COMMA : "," >
| < SEMICOLON : ";" >
| < LCP : "{" >
| < RCP : "}" >
| < LB : "[" >
| < RB : "]" >
| < LP : "(" >
| < RP : ")" >
| < ARROW : "->" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | "0"
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
	< IDENTIFIER : < LETTER > ( < LETTER > | < DIGIT > )* >
|
  < #LETTER:
      [
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* ARMY DEFINITION */

void ArmyDefinition() :
{

}
{
	< ARMY > < IDENTIFIER > [ < LCP > ( ArmyEntry() )+ < RCP > ]
}

void ArmyEntry() :
{
  
}
{
  UnitDefinition() | Conditions() | Extends()
}

void Conditions() :
{
}
{
	< CONDITIONS > < LP > Expression() < RP > < SEMICOLON >
}

void Extends() :
{}
{	< EXTENDS > Pattern() < SEMICOLON >
}

/* UNIT DEFINITION */

void UnitDefinition() :
{
	
}
{
	< UNIT > < IDENTIFIER > < LCP > (UnitEntry())+ < RCP >
}

void UnitEntry() :
{
  
}
{
  UnitSlotEntry()
| UnitBaseCostEntry()
| UnitCompositionEntry()
| UnitMemberEntry()
| UnitUpgradesEntry()
| UnitSpecialsEntry()
| UnitLinkedUnitsEntry()
| Extends()
| Conditions()
}

void UnitLinkedUnitsEntry() :
{
}
{  < LINKED > Pattern() < SEMICOLON >
}

void UnitSlotEntry() :
{
  
}
{
  < SLOTS > Pattern() < SEMICOLON >
}

void UnitBaseCostEntry() :
{
 
}
{
  < COST > Expression() < SEMICOLON >
}
void UnitCompositionEntry() :
{
  
}
{
  < COMPOSITION > Pattern() < SEMICOLON >
}

void UnitUpgradesEntry() :
{

}
{
  < UPGRADES >  Pattern()  < SEMICOLON >
}

void UnitSpecialsEntry() :
{
}
{
  < SPECIAL > < LCP > ( UnitDefinition() | Conditions())* < RCP >
}

/* UNIT MEMBER DEFINITION */

void UnitMemberEntry() :
{
  
}
{
  < MEMBER > < IDENTIFIER > ( < LCP > ( UnitMemberDefEntry() )* < RCP > | < SEMICOLON > )
}

void UnitMemberDefEntry() :
{
  
}
{
  MemberEquipmentEntry()
| Extends()
| Conditions()
}

void MemberEquipmentEntry() :
{
  
}
{
  < EQUIPMENT > Pattern() < SEMICOLON >
}


/* ARMY INSTANCES DEFINITION */

void ArmyBuildDefinition() :
{
  
}
{
	< BUILD > Pattern() [ "$" < IDENTIFIER > ] < LCP > ( UnitInstanceDefinition() )* < RCP >
}


void ArmyBuildEntries() :
{
}
{
  < ARMY > Reference() < SEMICOLON >
  ( UnitInstanceDefinition() )*
}

/* UNIT INSTANCE DEFINITION */

void UnitInstanceDefinition() :
{
}
{
  < UNIT > Pattern() [ "$" < IDENTIFIER > ] < LCP > (UnitInstanceEntry())* < RCP >
}

void UnitInstanceEntry() :
{
}
{
  UnitInstanceSlotEntry()
| UnitInstanceCompositionEntry()
| UnitInstanceLinkedEntry()
| UnitInstanceUpgradesEntry()
| UnitMemberInstanceEntry()
}

void UnitInstanceTypeEntry() :
{
}
{
  < TYPE > Reference() < SEMICOLON >
}

void UnitInstanceSlotEntry() :
{
}
{
  < SLOT > Pattern()  < SEMICOLON >
}

void UnitInstanceLinkedEntry() :
{
}
{
  < LINKED > Pattern() < SEMICOLON >
}

void UnitInstanceCompositionEntry() :
{
}
{
  < COMPOSITION >  Pattern()  < SEMICOLON >
}

void UnitInstanceUpgradesEntry() :
{
}
{
  < UPGRADES > Pattern() < SEMICOLON >
}

/* UNIT MEMBER INSTANCE DEFINITION */

void UnitMemberInstanceEntry() :
{
}
{
  < MEMBER > Pattern() [ "$" <IDENTIFIER > ] < LP > Pattern() < RP > < SEMICOLON >
}



/* PATTERNS */

void Pattern() :
{
}
{
  SetPatternExpr()
}


void SetPatternExpr() :
{
  
}
{
  AlternativeSetExpr() ( < COMMA > AlternativeSetExpr() )*
}

void AlternativeSetExpr() :
{

}
{
  SinglePatternExpr() ( < OR > SinglePatternExpr() )*
}

void SinglePatternExpr() :
{
 
}
{
  SingleEntityPatternExpr() | < LP > Pattern() < RP > | < LB > Pattern() < RB >
}

void SingleEntityPatternExpr() :
{
}
{
  [Quantifier()] Reference() [ < FOR > Expression() ]
}

void Quantifier() :
{
}
{
  < INTEGER_LITERAL > | "*"
}


/* EXPRESSIONS */

void Expression() :{}
{
  ConditionalExpression()| LabeledExpression()
}

void LabeledExpression() :
{
}
{  "#"< IDENTIFIER > < LP > ConditionalExpression() < RP >
}

void ConditionalExpression():
{}
{
 LogicalOrExpression() [ "?" Expression() ":" Expression() ]

}

void LogicalOrExpression():
{}
{
  LogicalAndExpression() ( "||" LogicalAndExpression() )*
}

void LogicalAndExpression():
{}
{
 EqualityExpression() ( "&&" EqualityExpression() )*
}

void EqualityExpression():
{}
{
  RelationalExpression() ( ( "==" | "!=" ) RelationalExpression() )*
}

void RelationalExpression():
{}
{
  AdditiveExpression() ( ( "<" | ">" | "<=" | ">=" ) AdditiveExpression() )*
}

void AdditiveExpression():
{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression():
{}
{
  CollectionOperationExpression() ( ( "*" | "/" ) CollectionOperationExpression() )*
}

void CollectionOperationExpression():
{}
{
  UnaryExpression() ( ( < CONTAINS > | < UNION > | < INTERS > | < SELECT > | < EACH > ) UnaryExpression() )*
}

void UnaryExpression():
{}
{
  ( "+" | "-" ) UnaryExpression()
|
  UnaryExpressionNotPlusMinus()
}


void UnaryExpressionNotPlusMinus():
{}
{
  "!" UnaryExpression()
|
   PrimaryExpression()
}

void PrimaryExpression():
{}
{
 (
  Literal()
|
  < LP > Expression() < RP >
|
  Reference()
) ( < ARROW > AttributeSelector() )* 
}

void AttributeSelector() :
{
}
{  < ARMY >
| < UNIT >
| < EQUIPMENT >
| < MEMBERS >
| < UPGRADES >
| < COST >
| < SLOTS >
| < TYPE >
| < UNITS >
| < LINKED >
| < IDENTIFIER >

}

void Literal():
{}
{
  <INTEGER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  CollectionLiteral()
}

void BooleanLiteral():
{}
{
  < TRUE >
|
  < FALSE >
}

void CollectionLiteral():
{
}
{
  < LCP > [ Expression() ( < COMMA > Expression() )* ] < RCP >
}

void Reference():
{}
{
  ["$"] <IDENTIFIER>  ( "." <IDENTIFIER> )*
}


