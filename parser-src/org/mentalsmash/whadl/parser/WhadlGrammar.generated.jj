/* Generated by JTB 1.4.6 */


options
{
  JDK_VERSION = "1.6";
  static = false;
  // JTB_VP = "org.mentalsmash.whadl.parser.visitor";
  // JTB_VD = "visitor";
  // JTB_NP = "org.mentalsmash.whadl.parser.nodes";
  // JTB_ND = "nodes";
  // JTB_O = "WhadlGrammar.generated.jj";
  // JTB_PRINTER = true;
  // JTB_IA = true;
  // JTB_JD = true;
  // JTB_TK = true;
  // JTB_W = false;
}

PARSER_BEGIN(WhadlParser)
package org.mentalsmash.whadl.parser;

import org.mentalsmash.whadl.parser.nodes.*;


public class WhadlParser {}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token tok) {
    final NodeToken node = new NodeToken(tok.image.intern(), tok.kind, tok.beginLine, tok.beginColumn, tok.endLine, tok.endColumn);
    if (tok.specialToken == null)
      return node;
    final java.util.ArrayList<NodeToken> temp = new java.util.ArrayList<NodeToken>();
    Token t = tok;
    while (t.specialToken != null) {
      t = t.specialToken;
      temp.add(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
    }
    for (int i = temp.size() - 1; i >= 0; --i)
      node.addSpecial(temp.get(i));
    node.trimSpecials();
    return node;
  }
}

PARSER_END(WhadlParser)

/* WHITE SPACES */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */
MORE :
{
  "/*" : IN_COMMENT
}

<IN_COMMENT>
MORE :
{
  < ~[] >
}

<IN_COMMENT>
SPECIAL_TOKEN :
{
  < COMMENT : "*/" > : DEFAULT
}

/* RESERVED WORDS */
TOKEN :
{
  < ARMY : "army" >
| < UNIT : "unit" >
| < UNITS : "units" >
| < CONDITIONS : "conditions" >
| < UPGRADES : "upgrades" >
| < EQUIPMENT : "equipment" >
| < MEMBER : "member" >
| < MEMBERS : "members" >
| < LINKED : "linked" >
| < COST : "cost" >
| < SLOT : "slot" >
| < SLOTS : "slots" >
| < COMPOSITION : "composition" >
| < SPECIAL : "special" >
| < EXTENDS : "extends" >
| < BUILD : "build" >
| < TYPE : "type" >
| < TAKE : "take" >
| < REPLACE : "replace" >
| < WITH : "with" >
| < FOR : "for" >
| < OR : "or" >
| < TRUE : "true" >
| < FALSE : "false" >
| < NONE : "none" >
| < CONTAINS : "contains" >
| < UNION : "union" >
| < INTERS : "intersect" >
| < SELECT : "select" >
| < EACH : "each" >
| < COMMA : "," >
| < SEMICOLON : ";" >
| < LCP : "{" >
| < RCP : "}" >
| < LB : "[" >
| < RB : "]" >
| < LP : "(" >
| < RP : ")" >
| < ARROW : "->" >
}

/* LITERALS */
TOKEN :
{
  < INTEGER_LITERAL : <DECIMAL_LITERAL> ( ["l", "L"] )?| "0" >
| < #DECIMAL_LITERAL : ["1"-"9"] ( ["0"-"9"] )* >
| < STRING_LITERAL : "\"" ( ( ~["\"", "\\", "\n", "\r"] )| ( "\\" ( ["n", "t", "b", "r", "f", "\\", "'", "\""]| ["0"-"7"] ( ["0"-"7"] )?| ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) )* "\"" >
}

/* IDENTIFIERS */
TOKEN :
{
  < IDENTIFIER : <LETTER> ( <LETTER>| <DIGIT> )* >
| < #LETTER : ["A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"] >
| < #DIGIT : ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"] >
}

/* ARMY DEFINITION */
ArmyDefinition ArmyDefinition() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeList n8 = null;
  ArmyEntry n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
}
{
  n1 = < ARMY >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < IDENTIFIER >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  [
    { n8 = new NodeList(); }
    { n5 = new NodeSequence(3); }
    n7 = < LCP >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n5.addNode(n6); }
    (
      n9 = ArmyEntry()
      { n8.addNode(n9); }
    )+
    { n8.nodes.trimToSize(); }
    { n5.addNode(n8); }
    n11 = < RCP >
    { n10 = JTBToolkit.makeNodeToken(n11); }
    { n5.addNode(n10); }
    { n4.addNode(n5); }
  ]
  { return new ArmyDefinition(n0, n2, n4); }
}

ArmyEntry ArmyEntry() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  UnitDefinition n1 = null;
  Conditions n2 = null;
  Extends n3 = null;
}
{
  (
    n1 = UnitDefinition()
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n2 = Conditions()
    { n0 = new NodeChoice(n2, 1, 3); }
  |
    n3 = Extends()
    { n0 = new NodeChoice(n3, 2, 3); }
  )
  { return new ArmyEntry(n0); }
}

Conditions Conditions() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = < CONDITIONS >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LP >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = < RP >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = < SEMICOLON >
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new Conditions(n0, n2, n4, n5, n7); }
}

Extends Extends() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < EXTENDS >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Pattern()
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new Extends(n0, n2, n3); }
}

/* UNIT DEFINITION */
UnitDefinition UnitDefinition() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeList n6 = new NodeList();
  UnitEntry n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < UNIT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < IDENTIFIER >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < LCP >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  (
    n7 = UnitEntry()
    { n6.addNode(n7); }
  )+
  { n6.nodes.trimToSize(); }
  n9 = < RCP >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new UnitDefinition(n0, n2, n4, n6, n8); }
}

UnitEntry UnitEntry() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  UnitSlotEntry n1 = null;
  UnitBaseCostEntry n2 = null;
  UnitCompositionEntry n3 = null;
  UnitMemberEntry n4 = null;
  UnitUpgradesEntry n5 = null;
  UnitSpecialsEntry n6 = null;
  UnitLinkedUnitsEntry n7 = null;
  Extends n8 = null;
  Conditions n9 = null;
}
{
  (
    n1 = UnitSlotEntry()
    { n0 = new NodeChoice(n1, 0, 9); }
  |
    n2 = UnitBaseCostEntry()
    { n0 = new NodeChoice(n2, 1, 9); }
  |
    n3 = UnitCompositionEntry()
    { n0 = new NodeChoice(n3, 2, 9); }
  |
    n4 = UnitMemberEntry()
    { n0 = new NodeChoice(n4, 3, 9); }
  |
    n5 = UnitUpgradesEntry()
    { n0 = new NodeChoice(n5, 4, 9); }
  |
    n6 = UnitSpecialsEntry()
    { n0 = new NodeChoice(n6, 5, 9); }
  |
    n7 = UnitLinkedUnitsEntry()
    { n0 = new NodeChoice(n7, 6, 9); }
  |
    n8 = Extends()
    { n0 = new NodeChoice(n8, 7, 9); }
  |
    n9 = Conditions()
    { n0 = new NodeChoice(n9, 8, 9); }
  )
  { return new UnitEntry(n0); }
}

UnitLinkedUnitsEntry UnitLinkedUnitsEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < LINKED >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Pattern()
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new UnitLinkedUnitsEntry(n0, n2, n3); }
}

UnitSlotEntry UnitSlotEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < SLOTS >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Pattern()
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new UnitSlotEntry(n0, n2, n3); }
}

UnitBaseCostEntry UnitBaseCostEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < COST >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Expression()
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new UnitBaseCostEntry(n0, n2, n3); }
}

UnitCompositionEntry UnitCompositionEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < COMPOSITION >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Pattern()
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new UnitCompositionEntry(n0, n2, n3); }
}

UnitUpgradesEntry UnitUpgradesEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < UPGRADES >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Pattern()
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new UnitUpgradesEntry(n0, n2, n3); }
}

UnitSpecialsEntry UnitSpecialsEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  NodeChoice n5 = null;
  UnitDefinition n6 = null;
  Conditions n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < SPECIAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LCP >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  (
    (
      n6 = UnitDefinition()
      { n5 = new NodeChoice(n6, 0, 2); }
    |
      n7 = Conditions()
      { n5 = new NodeChoice(n7, 1, 2); }
    )
    { n4.addNode(n5); }
  )*
  { n4.nodes.trimToSize(); }
  n9 = < RCP >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new UnitSpecialsEntry(n0, n2, n4, n8); }
}

/* UNIT MEMBER DEFINITION */
UnitMemberEntry UnitMemberEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeChoice n4 = null;
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeListOptional n8 = new NodeListOptional();
  UnitMemberDefEntry n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
}
{
  n1 = < MEMBER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < IDENTIFIER >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  (
    (
      { n5 = new NodeSequence(3); }
      n7 = < LCP >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      (
        n9 = UnitMemberDefEntry()
        { n8.addNode(n9); }
      )*
      { n8.nodes.trimToSize(); }
      { n5.addNode(n8); }
      n11 = < RCP >
      { n10 = JTBToolkit.makeNodeToken(n11); }
      { n5.addNode(n10); }
      { n4 = new NodeChoice(n5, 0, 2); }
    |
      n13 = < SEMICOLON >
      { n12 = JTBToolkit.makeNodeToken(n13); }
      { n4 = new NodeChoice(n12, 1, 2); }
    )
    
  )
  { return new UnitMemberEntry(n0, n2, n4); }
}

UnitMemberDefEntry UnitMemberDefEntry() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  MemberEquipmentEntry n1 = null;
  Extends n2 = null;
  Conditions n3 = null;
}
{
  (
    n1 = MemberEquipmentEntry()
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n2 = Extends()
    { n0 = new NodeChoice(n2, 1, 3); }
  |
    n3 = Conditions()
    { n0 = new NodeChoice(n3, 2, 3); }
  )
  { return new UnitMemberDefEntry(n0); }
}

MemberEquipmentEntry MemberEquipmentEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < EQUIPMENT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Pattern()
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new MemberEquipmentEntry(n0, n2, n3); }
}

/* ARMY INSTANCES DEFINITION */
ArmyBuildDefinition ArmyBuildDefinition() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeListOptional n11 = new NodeListOptional();
  UnitInstanceDefinition n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  n1 = < BUILD >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Pattern()
  [
    { n4 = new NodeSequence(2); }
    n6 = "$"
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
    n8 = < IDENTIFIER >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  ]
  n10 = < LCP >
  { n9 = JTBToolkit.makeNodeToken(n10); }
  (
    n12 = UnitInstanceDefinition()
    { n11.addNode(n12); }
  )*
  { n11.nodes.trimToSize(); }
  n14 = < RCP >
  { n13 = JTBToolkit.makeNodeToken(n14); }
  { return new ArmyBuildDefinition(n0, n2, n3, n9, n11, n13); }
}

ArmyBuildEntries ArmyBuildEntries() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Reference n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  UnitInstanceDefinition n6 = null;
}
{
  n1 = < ARMY >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Reference()
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  (
    n6 = UnitInstanceDefinition()
    { n5.addNode(n6); }
  )*
  { n5.nodes.trimToSize(); }
  { return new ArmyBuildEntries(n0, n2, n3, n5); }
}

/* UNIT INSTANCE DEFINITION */
UnitInstanceDefinition UnitInstanceDefinition() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeListOptional n11 = new NodeListOptional();
  UnitInstanceEntry n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  n1 = < UNIT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Pattern()
  [
    { n4 = new NodeSequence(2); }
    n6 = "$"
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
    n8 = < IDENTIFIER >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  ]
  n10 = < LCP >
  { n9 = JTBToolkit.makeNodeToken(n10); }
  (
    n12 = UnitInstanceEntry()
    { n11.addNode(n12); }
  )*
  { n11.nodes.trimToSize(); }
  n14 = < RCP >
  { n13 = JTBToolkit.makeNodeToken(n14); }
  { return new UnitInstanceDefinition(n0, n2, n3, n9, n11, n13); }
}

UnitInstanceEntry UnitInstanceEntry() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  UnitInstanceSlotEntry n1 = null;
  UnitInstanceCompositionEntry n2 = null;
  UnitInstanceLinkedEntry n3 = null;
  UnitInstanceUpgradesEntry n4 = null;
  UnitMemberInstanceEntry n5 = null;
}
{
  (
    n1 = UnitInstanceSlotEntry()
    { n0 = new NodeChoice(n1, 0, 5); }
  |
    n2 = UnitInstanceCompositionEntry()
    { n0 = new NodeChoice(n2, 1, 5); }
  |
    n3 = UnitInstanceLinkedEntry()
    { n0 = new NodeChoice(n3, 2, 5); }
  |
    n4 = UnitInstanceUpgradesEntry()
    { n0 = new NodeChoice(n4, 3, 5); }
  |
    n5 = UnitMemberInstanceEntry()
    { n0 = new NodeChoice(n5, 4, 5); }
  )
  { return new UnitInstanceEntry(n0); }
}

UnitInstanceTypeEntry UnitInstanceTypeEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Reference n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < TYPE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Reference()
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new UnitInstanceTypeEntry(n0, n2, n3); }
}

UnitInstanceSlotEntry UnitInstanceSlotEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < SLOT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Pattern()
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new UnitInstanceSlotEntry(n0, n2, n3); }
}

UnitInstanceLinkedEntry UnitInstanceLinkedEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < LINKED >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Pattern()
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new UnitInstanceLinkedEntry(n0, n2, n3); }
}

UnitInstanceCompositionEntry UnitInstanceCompositionEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < COMPOSITION >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Pattern()
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new UnitInstanceCompositionEntry(n0, n2, n3); }
}

UnitInstanceUpgradesEntry UnitInstanceUpgradesEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < UPGRADES >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Pattern()
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new UnitInstanceUpgradesEntry(n0, n2, n3); }
}

/* UNIT MEMBER INSTANCE DEFINITION */
UnitMemberInstanceEntry UnitMemberInstanceEntry() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  Pattern n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
}
{
  n1 = < MEMBER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Pattern()
  [
    { n4 = new NodeSequence(2); }
    n6 = "$"
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
    n8 = < IDENTIFIER >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  ]
  n10 = < LP >
  { n9 = JTBToolkit.makeNodeToken(n10); }
  n11 = Pattern()
  n13 = < RP >
  { n12 = JTBToolkit.makeNodeToken(n13); }
  n15 = < SEMICOLON >
  { n14 = JTBToolkit.makeNodeToken(n15); }
  { return new UnitMemberInstanceEntry(n0, n2, n3, n9, n11, n12, n14); }
}

/* PATTERNS */
Pattern Pattern() :
{
  // --- JTB generated node declarations ---
  SetPatternExpr n0 = null;
}
{
  n0 = SetPatternExpr()
  { return new Pattern(n0); }
}

SetPatternExpr SetPatternExpr() :
{
  // --- JTB generated node declarations ---
  AlternativeSetExpr n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  AlternativeSetExpr n5 = null;
}
{
  n0 = AlternativeSetExpr()
  (
    { n2 = new NodeSequence(2); }
    n4 = < COMMA >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = AlternativeSetExpr()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new SetPatternExpr(n0, n1); }
}

AlternativeSetExpr AlternativeSetExpr() :
{
  // --- JTB generated node declarations ---
  SinglePatternExpr n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  SinglePatternExpr n5 = null;
}
{
  n0 = SinglePatternExpr()
  (
    { n2 = new NodeSequence(2); }
    n4 = < OR >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = SinglePatternExpr()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new AlternativeSetExpr(n0, n1); }
}

SinglePatternExpr SinglePatternExpr() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  SingleEntityPatternExpr n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Pattern n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  Pattern n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
}
{
  (
    n1 = SingleEntityPatternExpr()
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    { n2 = new NodeSequence(3); }
    n4 = < LP >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = Pattern()
    { n2.addNode(n5); }
    n7 = < RP >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n2.addNode(n6); }
    { n0 = new NodeChoice(n2, 1, 3); }
  |
    { n8 = new NodeSequence(3); }
    n10 = < LB >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n8.addNode(n9); }
    n11 = Pattern()
    { n8.addNode(n11); }
    n13 = < RB >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n8.addNode(n12); }
    { n0 = new NodeChoice(n8, 2, 3); }
  )
  { return new SinglePatternExpr(n0); }
}

SingleEntityPatternExpr SingleEntityPatternExpr() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  Quantifier n1 = null;
  Reference n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Expression n7 = null;
}
{
  [
    n1 = Quantifier()
    { n0.addNode(n1); }
  ]
  n2 = Reference()
  [
    { n4 = new NodeSequence(2); }
    n6 = < FOR >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
    n7 = Expression()
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  ]
  { return new SingleEntityPatternExpr(n0, n2, n3); }
}

Quantifier Quantifier() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  (
    n2 = < INTEGER_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n4 = "*"
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new Quantifier(n0); }
}

/* EXPRESSIONS */
Expression Expression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ConditionalExpression n1 = null;
  LabeledExpression n2 = null;
}
{
  (
    n1 = ConditionalExpression()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = LabeledExpression()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new Expression(n0); }
}

LabeledExpression LabeledExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  ConditionalExpression n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = "#"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < IDENTIFIER >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < LP >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = ConditionalExpression()
  n8 = < RP >
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new LabeledExpression(n0, n2, n4, n6, n7); }
}

ConditionalExpression ConditionalExpression() :
{
  // --- JTB generated node declarations ---
  LogicalOrExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Expression n8 = null;
}
{
  n0 = LogicalOrExpression()
  [
    { n2 = new NodeSequence(4); }
    n4 = "?"
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = Expression()
    { n2.addNode(n5); }
    n7 = ":"
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n2.addNode(n6); }
    n8 = Expression()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  ]
  { return new ConditionalExpression(n0, n1); }
}

LogicalOrExpression LogicalOrExpression() :
{
  // --- JTB generated node declarations ---
  LogicalAndExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  LogicalAndExpression n5 = null;
}
{
  n0 = LogicalAndExpression()
  (
    { n2 = new NodeSequence(2); }
    n4 = "||"
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = LogicalAndExpression()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new LogicalOrExpression(n0, n1); }
}

LogicalAndExpression LogicalAndExpression() :
{
  // --- JTB generated node declarations ---
  EqualityExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  EqualityExpression n5 = null;
}
{
  n0 = EqualityExpression()
  (
    { n2 = new NodeSequence(2); }
    n4 = "&&"
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = EqualityExpression()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new LogicalAndExpression(n0, n1); }
}

EqualityExpression EqualityExpression() :
{
  // --- JTB generated node declarations ---
  RelationalExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  RelationalExpression n8 = null;
}
{
  n0 = RelationalExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = "=="
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        n7 = "!="
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 2); }
      )
      
    )
    { n2.addNode(n3); }
    n8 = RelationalExpression()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new EqualityExpression(n0, n1); }
}

RelationalExpression RelationalExpression() :
{
  // --- JTB generated node declarations ---
  AdditiveExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  AdditiveExpression n12 = null;
}
{
  n0 = AdditiveExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = "<"
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 4); }
      |
        n7 = ">"
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 4); }
      |
        n9 = "<="
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n3 = new NodeChoice(n8, 2, 4); }
      |
        n11 = ">="
        { n10 = JTBToolkit.makeNodeToken(n11); }
        { n3 = new NodeChoice(n10, 3, 4); }
      )
      
    )
    { n2.addNode(n3); }
    n12 = AdditiveExpression()
    { n2.addNode(n12); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new RelationalExpression(n0, n1); }
}

AdditiveExpression AdditiveExpression() :
{
  // --- JTB generated node declarations ---
  MultiplicativeExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  MultiplicativeExpression n8 = null;
}
{
  n0 = MultiplicativeExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = "+"
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        n7 = "-"
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 2); }
      )
      
    )
    { n2.addNode(n3); }
    n8 = MultiplicativeExpression()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new AdditiveExpression(n0, n1); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
  // --- JTB generated node declarations ---
  CollectionOperationExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  CollectionOperationExpression n8 = null;
}
{
  n0 = CollectionOperationExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = "*"
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        n7 = "/"
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 2); }
      )
      
    )
    { n2.addNode(n3); }
    n8 = CollectionOperationExpression()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new MultiplicativeExpression(n0, n1); }
}

CollectionOperationExpression CollectionOperationExpression() :
{
  // --- JTB generated node declarations ---
  UnaryExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  UnaryExpression n14 = null;
}
{
  n0 = UnaryExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = < CONTAINS >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 5); }
      |
        n7 = < UNION >
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 5); }
      |
        n9 = < INTERS >
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n3 = new NodeChoice(n8, 2, 5); }
      |
        n11 = < SELECT >
        { n10 = JTBToolkit.makeNodeToken(n11); }
        { n3 = new NodeChoice(n10, 3, 5); }
      |
        n13 = < EACH >
        { n12 = JTBToolkit.makeNodeToken(n13); }
        { n3 = new NodeChoice(n12, 4, 5); }
      )
      
    )
    { n2.addNode(n3); }
    n14 = UnaryExpression()
    { n2.addNode(n14); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new CollectionOperationExpression(n0, n1); }
}

UnaryExpression UnaryExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  UnaryExpression n7 = null;
  UnaryExpressionNotPlusMinus n8 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    (
      (
        n4 = "+"
        { n3 = JTBToolkit.makeNodeToken(n4); }
        { n2 = new NodeChoice(n3, 0, 2); }
      |
        n6 = "-"
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n2 = new NodeChoice(n5, 1, 2); }
      )
      
    )
    { n1.addNode(n2); }
    n7 = UnaryExpression()
    { n1.addNode(n7); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n8 = UnaryExpressionNotPlusMinus()
    { n0 = new NodeChoice(n8, 1, 2); }
  )
  { return new UnaryExpression(n0); }
}

UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  UnaryExpression n4 = null;
  PrimaryExpression n5 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    n3 = "!"
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    n4 = UnaryExpression()
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n5 = PrimaryExpression()
    { n0 = new NodeChoice(n5, 1, 2); }
  )
  { return new UnaryExpressionNotPlusMinus(n0); }
}

PrimaryExpression PrimaryExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Literal n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Reference n8 = null;
  NodeListOptional n9 = new NodeListOptional();
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  AttributeSelector n13 = null;
}
{
  (
    (
      n1 = Literal()
      { n0 = new NodeChoice(n1, 0, 3); }
    |
      { n2 = new NodeSequence(3); }
      n4 = < LP >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5 = Expression()
      { n2.addNode(n5); }
      n7 = < RP >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n0 = new NodeChoice(n2, 1, 3); }
    |
      n8 = Reference()
      { n0 = new NodeChoice(n8, 2, 3); }
    )
    
  )
  (
    { n10 = new NodeSequence(2); }
    n12 = < ARROW >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n10.addNode(n11); }
    n13 = AttributeSelector()
    { n10.addNode(n13); }
    { n9.addNode(n10); }
  )*
  { n9.nodes.trimToSize(); }
  { return new PrimaryExpression(n0, n9); }
}

AttributeSelector AttributeSelector() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
}
{
  (
    n2 = < ARMY >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 11); }
  |
    n4 = < UNIT >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 11); }
  |
    n6 = < EQUIPMENT >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 11); }
  |
    n8 = < MEMBERS >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 3, 11); }
  |
    n10 = < UPGRADES >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 4, 11); }
  |
    n12 = < COST >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 5, 11); }
  |
    n14 = < SLOTS >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n0 = new NodeChoice(n13, 6, 11); }
  |
    n16 = < TYPE >
    { n15 = JTBToolkit.makeNodeToken(n16); }
    { n0 = new NodeChoice(n15, 7, 11); }
  |
    n18 = < UNITS >
    { n17 = JTBToolkit.makeNodeToken(n18); }
    { n0 = new NodeChoice(n17, 8, 11); }
  |
    n20 = < LINKED >
    { n19 = JTBToolkit.makeNodeToken(n20); }
    { n0 = new NodeChoice(n19, 9, 11); }
  |
    n22 = < IDENTIFIER >
    { n21 = JTBToolkit.makeNodeToken(n22); }
    { n0 = new NodeChoice(n21, 10, 11); }
  )
  { return new AttributeSelector(n0); }
}

Literal Literal() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  BooleanLiteral n5 = null;
  CollectionLiteral n6 = null;
}
{
  (
    n2 = < INTEGER_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 4); }
  |
    n4 = < STRING_LITERAL >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 4); }
  |
    n5 = BooleanLiteral()
    { n0 = new NodeChoice(n5, 2, 4); }
  |
    n6 = CollectionLiteral()
    { n0 = new NodeChoice(n6, 3, 4); }
  )
  { return new Literal(n0); }
}

BooleanLiteral BooleanLiteral() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  (
    n2 = < TRUE >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n4 = < FALSE >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new BooleanLiteral(n0); }
}

CollectionLiteral CollectionLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  Expression n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Expression n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
}
{
  n1 = < LCP >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n5 = new NodeListOptional(); }
    { n3 = new NodeSequence(2); }
    n4 = Expression()
    { n3.addNode(n4); }
    (
      { n6 = new NodeSequence(2); }
      n8 = < COMMA >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9 = Expression()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
    )*
    { n5.nodes.trimToSize(); }
    { n3.addNode(n5); }
    { n2.addNode(n3); }
  ]
  n11 = < RCP >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  { return new CollectionLiteral(n0, n2, n10); }
}

Reference Reference() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  [
    n2 = "$"
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0.addNode(n1); }
  ]
  n4 = < IDENTIFIER >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  (
    { n6 = new NodeSequence(2); }
    n8 = "."
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n6.addNode(n7); }
    n10 = < IDENTIFIER >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n6.addNode(n9); }
    { n5.addNode(n6); }
  )*
  { n5.nodes.trimToSize(); }
  { return new Reference(n0, n3, n5); }
}
