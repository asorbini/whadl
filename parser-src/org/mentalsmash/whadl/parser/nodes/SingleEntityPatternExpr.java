/* Generated by JTB 1.4.6 */
package org.mentalsmash.whadl.parser.nodes;

import org.mentalsmash.whadl.parser.visitor.*;

/**
 * JTB node class for the production SingleEntityPatternExpr:<br>
 * Corresponding grammar :<br>
 * f0 -> [ Quantifier() ]<br>
 * f1 -> Reference()<br>
 * f2 -> [ #0 < FOR > #1 Expression() ]<br>
 */
public class SingleEntityPatternExpr implements INode {

  /** A child node */
  public NodeOptional f0;

  /** A child node */
  public Reference f1;

  /** A child node */
  public NodeOptional f2;

  /** The serial version uid */
  private static final long serialVersionUID = 146L;

  /**
   * Constructs the node with all its children nodes.
   *
   * @param n0 first child node
   * @param n1 next child node
   * @param n2 next child node
   */
  public SingleEntityPatternExpr(final NodeOptional n0, final Reference n1, final NodeOptional n2) {
    f0 = n0;
    f1 = n1;
    f2 = n2;
  }

  /**
   * Accepts the IRetArguVisitor visitor.
   *
   * @param <R> the user return type
   * @param <A> the user argument type
   * @param vis the visitor
   * @param argu a user chosen argument
   * @return a user chosen return information
   */
  public <R, A> R accept(final IRetArguVisitor<R, A> vis, final A argu) {
    return vis.visit(this, argu);
  }

  /**
   * Accepts the IRetVisitor visitor.
   *
   * @param <R> the user return type
   * @param vis the visitor
   * @return a user chosen return information
   */
  public <R> R accept(final IRetVisitor<R> vis) {
    return vis.visit(this);
  }

  /**
   * Accepts the IVoidArguVisitor visitor.
   *
   * @param <A> the user argument type
   * @param vis the visitor
   * @param argu a user chosen argument
   */
  public <A> void accept(final IVoidArguVisitor<A> vis, final A argu) {
    vis.visit(this, argu);
  }

  /**
   * Accepts the IVoidVisitor visitor.
   *
   * @param vis the visitor
   */
  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }

}
