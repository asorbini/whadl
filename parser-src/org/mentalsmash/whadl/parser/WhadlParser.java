/* Generated By:JavaCC: Do not edit this line. WhadlParser.java */
package org.mentalsmash.whadl.parser;

import org.mentalsmash.whadl.parser.nodes.*;


public class WhadlParser implements WhadlParserConstants {

/* ARMY DEFINITION */
  final public ArmyDefinition ArmyDefinition() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeList n8 = null;
  ArmyEntry n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
    n1 = jj_consume_token(ARMY);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
    n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCP:
      n8 = new NodeList();
      n5 = new NodeSequence(3);
      n7 = jj_consume_token(LCP);
      n6 = JTBToolkit.makeNodeToken(n7);
      n5.addNode(n6);
      label_1:
      while (true) {
        n9 = ArmyEntry();
        n8.addNode(n9);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNIT:
        case CONDITIONS:
        case EXTENDS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      n8.nodes.trimToSize();
      n5.addNode(n8);
      n11 = jj_consume_token(RCP);
      n10 = JTBToolkit.makeNodeToken(n11);
      n5.addNode(n10);
      n4.addNode(n5);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    {if (true) return new ArmyDefinition(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  final public ArmyEntry ArmyEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  UnitDefinition n1 = null;
  Conditions n2 = null;
  Extends n3 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIT:
      n1 = UnitDefinition();
      n0 = new NodeChoice(n1, 0, 3);
      break;
    case CONDITIONS:
      n2 = Conditions();
      n0 = new NodeChoice(n2, 1, 3);
      break;
    case EXTENDS:
      n3 = Extends();
      n0 = new NodeChoice(n3, 2, 3);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new ArmyEntry(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Conditions Conditions() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
    n1 = jj_consume_token(CONDITIONS);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LP);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RP);
    n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
    n7 = JTBToolkit.makeNodeToken(n8);
    {if (true) return new Conditions(n0, n2, n4, n5, n7);}
    throw new Error("Missing return statement in function");
  }

  final public Extends Extends() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(EXTENDS);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Pattern();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new Extends(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

/* UNIT DEFINITION */
  final public UnitDefinition UnitDefinition() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeList n6 = new NodeList();
  UnitEntry n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
    n1 = jj_consume_token(UNIT);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LCP);
    n4 = JTBToolkit.makeNodeToken(n5);
    label_2:
    while (true) {
      n7 = UnitEntry();
      n6.addNode(n7);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDITIONS:
      case UPGRADES:
      case MEMBER:
      case LINKED:
      case COST:
      case SLOTS:
      case COMPOSITION:
      case SPECIAL:
      case EXTENDS:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
    n6.nodes.trimToSize();
    n9 = jj_consume_token(RCP);
    n8 = JTBToolkit.makeNodeToken(n9);
    {if (true) return new UnitDefinition(n0, n2, n4, n6, n8);}
    throw new Error("Missing return statement in function");
  }

  final public UnitEntry UnitEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  UnitSlotEntry n1 = null;
  UnitBaseCostEntry n2 = null;
  UnitCompositionEntry n3 = null;
  UnitMemberEntry n4 = null;
  UnitUpgradesEntry n5 = null;
  UnitSpecialsEntry n6 = null;
  UnitLinkedUnitsEntry n7 = null;
  Extends n8 = null;
  Conditions n9 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLOTS:
      n1 = UnitSlotEntry();
      n0 = new NodeChoice(n1, 0, 9);
      break;
    case COST:
      n2 = UnitBaseCostEntry();
      n0 = new NodeChoice(n2, 1, 9);
      break;
    case COMPOSITION:
      n3 = UnitCompositionEntry();
      n0 = new NodeChoice(n3, 2, 9);
      break;
    case MEMBER:
      n4 = UnitMemberEntry();
      n0 = new NodeChoice(n4, 3, 9);
      break;
    case UPGRADES:
      n5 = UnitUpgradesEntry();
      n0 = new NodeChoice(n5, 4, 9);
      break;
    case SPECIAL:
      n6 = UnitSpecialsEntry();
      n0 = new NodeChoice(n6, 5, 9);
      break;
    case LINKED:
      n7 = UnitLinkedUnitsEntry();
      n0 = new NodeChoice(n7, 6, 9);
      break;
    case EXTENDS:
      n8 = Extends();
      n0 = new NodeChoice(n8, 7, 9);
      break;
    case CONDITIONS:
      n9 = Conditions();
      n0 = new NodeChoice(n9, 8, 9);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new UnitEntry(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnitLinkedUnitsEntry UnitLinkedUnitsEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(LINKED);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Pattern();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new UnitLinkedUnitsEntry(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public UnitSlotEntry UnitSlotEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(SLOTS);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Pattern();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new UnitSlotEntry(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public UnitBaseCostEntry UnitBaseCostEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(COST);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new UnitBaseCostEntry(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public UnitCompositionEntry UnitCompositionEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(COMPOSITION);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Pattern();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new UnitCompositionEntry(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public UnitUpgradesEntry UnitUpgradesEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(UPGRADES);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Pattern();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new UnitUpgradesEntry(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public UnitSpecialsEntry UnitSpecialsEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  NodeChoice n5 = null;
  UnitDefinition n6 = null;
  Conditions n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
    n1 = jj_consume_token(SPECIAL);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LCP);
    n2 = JTBToolkit.makeNodeToken(n3);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIT:
      case CONDITIONS:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIT:
        n6 = UnitDefinition();
        n5 = new NodeChoice(n6, 0, 2);
        break;
      case CONDITIONS:
        n7 = Conditions();
        n5 = new NodeChoice(n7, 1, 2);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n4.addNode(n5);
    }
    n4.nodes.trimToSize();
    n9 = jj_consume_token(RCP);
    n8 = JTBToolkit.makeNodeToken(n9);
    {if (true) return new UnitSpecialsEntry(n0, n2, n4, n8);}
    throw new Error("Missing return statement in function");
  }

/* UNIT MEMBER DEFINITION */
  final public UnitMemberEntry UnitMemberEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeChoice n4 = null;
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeListOptional n8 = new NodeListOptional();
  UnitMemberDefEntry n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
    n1 = jj_consume_token(MEMBER);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
    n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCP:
        n5 = new NodeSequence(3);
      n7 = jj_consume_token(LCP);
        n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONDITIONS:
        case EQUIPMENT:
        case EXTENDS:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        n9 = UnitMemberDefEntry();
          n8.addNode(n9);
      }
        n8.nodes.trimToSize();
        n5.addNode(n8);
      n11 = jj_consume_token(RCP);
        n10 = JTBToolkit.makeNodeToken(n11);
        n5.addNode(n10);
        n4 = new NodeChoice(n5, 0, 2);
      break;
    case SEMICOLON:
      n13 = jj_consume_token(SEMICOLON);
        n12 = JTBToolkit.makeNodeToken(n13);
        n4 = new NodeChoice(n12, 1, 2);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new UnitMemberEntry(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  final public UnitMemberDefEntry UnitMemberDefEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  MemberEquipmentEntry n1 = null;
  Extends n2 = null;
  Conditions n3 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUIPMENT:
      n1 = MemberEquipmentEntry();
      n0 = new NodeChoice(n1, 0, 3);
      break;
    case EXTENDS:
      n2 = Extends();
      n0 = new NodeChoice(n2, 1, 3);
      break;
    case CONDITIONS:
      n3 = Conditions();
      n0 = new NodeChoice(n3, 2, 3);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new UnitMemberDefEntry(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MemberEquipmentEntry MemberEquipmentEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(EQUIPMENT);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Pattern();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new MemberEquipmentEntry(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

/* ARMY INSTANCES DEFINITION */
  final public ArmyBuildDefinition ArmyBuildDefinition() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeListOptional n11 = new NodeListOptional();
  UnitInstanceDefinition n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
    n1 = jj_consume_token(BUILD);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Pattern();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      n4 = new NodeSequence(2);
      n6 = jj_consume_token(54);
      n5 = JTBToolkit.makeNodeToken(n6);
      n4.addNode(n5);
      n8 = jj_consume_token(IDENTIFIER);
      n7 = JTBToolkit.makeNodeToken(n8);
      n4.addNode(n7);
      n3.addNode(n4);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    n10 = jj_consume_token(LCP);
    n9 = JTBToolkit.makeNodeToken(n10);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIT:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      n12 = UnitInstanceDefinition();
      n11.addNode(n12);
    }
    n11.nodes.trimToSize();
    n14 = jj_consume_token(RCP);
    n13 = JTBToolkit.makeNodeToken(n14);
    {if (true) return new ArmyBuildDefinition(n0, n2, n3, n9, n11, n13);}
    throw new Error("Missing return statement in function");
  }

  final public ArmyBuildEntries ArmyBuildEntries() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Reference n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  UnitInstanceDefinition n6 = null;
    n1 = jj_consume_token(ARMY);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Reference();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIT:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      n6 = UnitInstanceDefinition();
      n5.addNode(n6);
    }
    n5.nodes.trimToSize();
    {if (true) return new ArmyBuildEntries(n0, n2, n3, n5);}
    throw new Error("Missing return statement in function");
  }

/* UNIT INSTANCE DEFINITION */
  final public UnitInstanceDefinition UnitInstanceDefinition() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeListOptional n11 = new NodeListOptional();
  UnitInstanceEntry n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
    n1 = jj_consume_token(UNIT);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Pattern();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      n4 = new NodeSequence(2);
      n6 = jj_consume_token(54);
      n5 = JTBToolkit.makeNodeToken(n6);
      n4.addNode(n5);
      n8 = jj_consume_token(IDENTIFIER);
      n7 = JTBToolkit.makeNodeToken(n8);
      n4.addNode(n7);
      n3.addNode(n4);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    n10 = jj_consume_token(LCP);
    n9 = JTBToolkit.makeNodeToken(n10);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UPGRADES:
      case MEMBER:
      case LINKED:
      case SLOT:
      case COMPOSITION:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      n12 = UnitInstanceEntry();
      n11.addNode(n12);
    }
    n11.nodes.trimToSize();
    n14 = jj_consume_token(RCP);
    n13 = JTBToolkit.makeNodeToken(n14);
    {if (true) return new UnitInstanceDefinition(n0, n2, n3, n9, n11, n13);}
    throw new Error("Missing return statement in function");
  }

  final public UnitInstanceEntry UnitInstanceEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  UnitInstanceSlotEntry n1 = null;
  UnitInstanceCompositionEntry n2 = null;
  UnitInstanceLinkedEntry n3 = null;
  UnitInstanceUpgradesEntry n4 = null;
  UnitMemberInstanceEntry n5 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLOT:
      n1 = UnitInstanceSlotEntry();
      n0 = new NodeChoice(n1, 0, 5);
      break;
    case COMPOSITION:
      n2 = UnitInstanceCompositionEntry();
      n0 = new NodeChoice(n2, 1, 5);
      break;
    case LINKED:
      n3 = UnitInstanceLinkedEntry();
      n0 = new NodeChoice(n3, 2, 5);
      break;
    case UPGRADES:
      n4 = UnitInstanceUpgradesEntry();
      n0 = new NodeChoice(n4, 3, 5);
      break;
    case MEMBER:
      n5 = UnitMemberInstanceEntry();
      n0 = new NodeChoice(n5, 4, 5);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new UnitInstanceEntry(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnitInstanceTypeEntry UnitInstanceTypeEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Reference n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(TYPE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Reference();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new UnitInstanceTypeEntry(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public UnitInstanceSlotEntry UnitInstanceSlotEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(SLOT);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Pattern();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new UnitInstanceSlotEntry(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public UnitInstanceLinkedEntry UnitInstanceLinkedEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(LINKED);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Pattern();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new UnitInstanceLinkedEntry(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public UnitInstanceCompositionEntry UnitInstanceCompositionEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(COMPOSITION);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Pattern();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new UnitInstanceCompositionEntry(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public UnitInstanceUpgradesEntry UnitInstanceUpgradesEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(UPGRADES);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Pattern();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new UnitInstanceUpgradesEntry(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

/* UNIT MEMBER INSTANCE DEFINITION */
  final public UnitMemberInstanceEntry UnitMemberInstanceEntry() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Pattern n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  Pattern n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
    n1 = jj_consume_token(MEMBER);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Pattern();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      n4 = new NodeSequence(2);
      n6 = jj_consume_token(54);
      n5 = JTBToolkit.makeNodeToken(n6);
      n4.addNode(n5);
      n8 = jj_consume_token(IDENTIFIER);
      n7 = JTBToolkit.makeNodeToken(n8);
      n4.addNode(n7);
      n3.addNode(n4);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    n10 = jj_consume_token(LP);
    n9 = JTBToolkit.makeNodeToken(n10);
    n11 = Pattern();
    n13 = jj_consume_token(RP);
    n12 = JTBToolkit.makeNodeToken(n13);
    n15 = jj_consume_token(SEMICOLON);
    n14 = JTBToolkit.makeNodeToken(n15);
    {if (true) return new UnitMemberInstanceEntry(n0, n2, n3, n9, n11, n12, n14);}
    throw new Error("Missing return statement in function");
  }

/* PATTERNS */
  final public Pattern Pattern() throws ParseException {
  // --- JTB generated node declarations ---
  SetPatternExpr n0 = null;
    n0 = SetPatternExpr();
    {if (true) return new Pattern(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SetPatternExpr SetPatternExpr() throws ParseException {
  // --- JTB generated node declarations ---
  AlternativeSetExpr n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  AlternativeSetExpr n5 = null;
    n0 = AlternativeSetExpr();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = AlternativeSetExpr();
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new SetPatternExpr(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public AlternativeSetExpr AlternativeSetExpr() throws ParseException {
  // --- JTB generated node declarations ---
  SinglePatternExpr n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  SinglePatternExpr n5 = null;
    n0 = SinglePatternExpr();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(OR);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = SinglePatternExpr();
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new AlternativeSetExpr(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public SinglePatternExpr SinglePatternExpr() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  SingleEntityPatternExpr n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Pattern n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  Pattern n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case 54:
    case 55:
      n1 = SingleEntityPatternExpr();
      n0 = new NodeChoice(n1, 0, 3);
      break;
    case LP:
      n2 = new NodeSequence(3);
      n4 = jj_consume_token(LP);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = Pattern();
      n2.addNode(n5);
      n7 = jj_consume_token(RP);
      n6 = JTBToolkit.makeNodeToken(n7);
      n2.addNode(n6);
      n0 = new NodeChoice(n2, 1, 3);
      break;
    case LB:
      n8 = new NodeSequence(3);
      n10 = jj_consume_token(LB);
      n9 = JTBToolkit.makeNodeToken(n10);
      n8.addNode(n9);
      n11 = Pattern();
      n8.addNode(n11);
      n13 = jj_consume_token(RB);
      n12 = JTBToolkit.makeNodeToken(n13);
      n8.addNode(n12);
      n0 = new NodeChoice(n8, 2, 3);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new SinglePatternExpr(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SingleEntityPatternExpr SingleEntityPatternExpr() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  Quantifier n1 = null;
  Reference n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Expression n7 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case 55:
      n1 = Quantifier();
      n0.addNode(n1);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    n2 = Reference();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      n4 = new NodeSequence(2);
      n6 = jj_consume_token(FOR);
      n5 = JTBToolkit.makeNodeToken(n6);
      n4.addNode(n5);
      n7 = Expression();
      n4.addNode(n7);
      n3.addNode(n4);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    {if (true) return new SingleEntityPatternExpr(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public Quantifier Quantifier() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n2 = jj_consume_token(INTEGER_LITERAL);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case 55:
      n4 = jj_consume_token(55);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 2);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Quantifier(n0);}
    throw new Error("Missing return statement in function");
  }

/* EXPRESSIONS */
  final public Expression Expression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ConditionalExpression n1 = null;
  LabeledExpression n2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LCP:
    case LP:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 54:
    case 67:
    case 68:
    case 70:
      n1 = ConditionalExpression();
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case 56:
      n2 = LabeledExpression();
      n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Expression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public LabeledExpression LabeledExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  ConditionalExpression n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
    n1 = jj_consume_token(56);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LP);
    n4 = JTBToolkit.makeNodeToken(n5);
    n6 = ConditionalExpression();
    n8 = jj_consume_token(RP);
    n7 = JTBToolkit.makeNodeToken(n8);
    {if (true) return new LabeledExpression(n0, n2, n4, n6, n7);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpression ConditionalExpression() throws ParseException {
  // --- JTB generated node declarations ---
  LogicalOrExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Expression n8 = null;
    n0 = LogicalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
      n2 = new NodeSequence(4);
      n4 = jj_consume_token(57);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = Expression();
      n2.addNode(n5);
      n7 = jj_consume_token(58);
      n6 = JTBToolkit.makeNodeToken(n7);
      n2.addNode(n6);
      n8 = Expression();
      n2.addNode(n8);
      n1.addNode(n2);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    {if (true) return new ConditionalExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalOrExpression LogicalOrExpression() throws ParseException {
  // --- JTB generated node declarations ---
  LogicalAndExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  LogicalAndExpression n5 = null;
    n0 = LogicalAndExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 59:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_10;
      }
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(59);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = LogicalAndExpression();
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new LogicalOrExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalAndExpression LogicalAndExpression() throws ParseException {
  // --- JTB generated node declarations ---
  EqualityExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  EqualityExpression n5 = null;
    n0 = EqualityExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 60:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_11;
      }
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(60);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = EqualityExpression();
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new LogicalAndExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpression EqualityExpression() throws ParseException {
  // --- JTB generated node declarations ---
  RelationalExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  RelationalExpression n8 = null;
    n0 = RelationalExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 61:
      case 62:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_12;
      }
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 61:
        n5 = jj_consume_token(61);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 2);
        break;
      case 62:
        n7 = jj_consume_token(62);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 2);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n8 = RelationalExpression();
      n2.addNode(n8);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new EqualityExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpression RelationalExpression() throws ParseException {
  // --- JTB generated node declarations ---
  AdditiveExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  AdditiveExpression n12 = null;
    n0 = AdditiveExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 63:
      case 64:
      case 65:
      case 66:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_13;
      }
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 63:
        n5 = jj_consume_token(63);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 4);
        break;
      case 64:
        n7 = jj_consume_token(64);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 4);
        break;
      case 65:
        n9 = jj_consume_token(65);
          n8 = JTBToolkit.makeNodeToken(n9);
          n3 = new NodeChoice(n8, 2, 4);
        break;
      case 66:
        n11 = jj_consume_token(66);
          n10 = JTBToolkit.makeNodeToken(n11);
          n3 = new NodeChoice(n10, 3, 4);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n12 = AdditiveExpression();
      n2.addNode(n12);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new RelationalExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public AdditiveExpression AdditiveExpression() throws ParseException {
  // --- JTB generated node declarations ---
  MultiplicativeExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  MultiplicativeExpression n8 = null;
    n0 = MultiplicativeExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
      case 68:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_14;
      }
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
        n5 = jj_consume_token(67);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 2);
        break;
      case 68:
        n7 = jj_consume_token(68);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 2);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n8 = MultiplicativeExpression();
      n2.addNode(n8);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new AdditiveExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
  // --- JTB generated node declarations ---
  CollectionOperationExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  CollectionOperationExpression n8 = null;
    n0 = CollectionOperationExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
      case 69:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_15;
      }
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
        n5 = jj_consume_token(55);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 2);
        break;
      case 69:
        n7 = jj_consume_token(69);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 2);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n8 = CollectionOperationExpression();
      n2.addNode(n8);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new MultiplicativeExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public CollectionOperationExpression CollectionOperationExpression() throws ParseException {
  // --- JTB generated node declarations ---
  UnaryExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  UnaryExpression n14 = null;
    n0 = UnaryExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTAINS:
      case UNION:
      case INTERS:
      case SELECT:
      case EACH:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_16;
      }
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTAINS:
        n5 = jj_consume_token(CONTAINS);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 5);
        break;
      case UNION:
        n7 = jj_consume_token(UNION);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 5);
        break;
      case INTERS:
        n9 = jj_consume_token(INTERS);
          n8 = JTBToolkit.makeNodeToken(n9);
          n3 = new NodeChoice(n8, 2, 5);
        break;
      case SELECT:
        n11 = jj_consume_token(SELECT);
          n10 = JTBToolkit.makeNodeToken(n11);
          n3 = new NodeChoice(n10, 3, 5);
        break;
      case EACH:
        n13 = jj_consume_token(EACH);
          n12 = JTBToolkit.makeNodeToken(n13);
          n3 = new NodeChoice(n12, 4, 5);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n14 = UnaryExpression();
      n2.addNode(n14);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new CollectionOperationExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpression UnaryExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  UnaryExpression n7 = null;
  UnaryExpressionNotPlusMinus n8 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
    case 68:
      n1 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
        n4 = jj_consume_token(67);
          n3 = JTBToolkit.makeNodeToken(n4);
          n2 = new NodeChoice(n3, 0, 2);
        break;
      case 68:
        n6 = jj_consume_token(68);
          n5 = JTBToolkit.makeNodeToken(n6);
          n2 = new NodeChoice(n5, 1, 2);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n1.addNode(n2);
      n7 = UnaryExpression();
      n1.addNode(n7);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case TRUE:
    case FALSE:
    case LCP:
    case LP:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 54:
    case 70:
      n8 = UnaryExpressionNotPlusMinus();
      n0 = new NodeChoice(n8, 1, 2);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new UnaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  UnaryExpression n4 = null;
  PrimaryExpression n5 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 70:
      n1 = new NodeSequence(2);
      n3 = jj_consume_token(70);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      n4 = UnaryExpression();
      n1.addNode(n4);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case TRUE:
    case FALSE:
    case LCP:
    case LP:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 54:
      n5 = PrimaryExpression();
      n0 = new NodeChoice(n5, 1, 2);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new UnaryExpressionNotPlusMinus(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Literal n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Reference n8 = null;
  NodeListOptional n9 = new NodeListOptional();
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  AttributeSelector n13 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LCP:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
      n1 = Literal();
        n0 = new NodeChoice(n1, 0, 3);
      break;
    case LP:
        n2 = new NodeSequence(3);
      n4 = jj_consume_token(LP);
        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Expression();
        n2.addNode(n5);
      n7 = jj_consume_token(RP);
        n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
        n0 = new NodeChoice(n2, 1, 3);
      break;
    case IDENTIFIER:
    case 54:
      n8 = Reference();
        n0 = new NodeChoice(n8, 2, 3);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARROW:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_17;
      }
      n10 = new NodeSequence(2);
      n12 = jj_consume_token(ARROW);
      n11 = JTBToolkit.makeNodeToken(n12);
      n10.addNode(n11);
      n13 = AttributeSelector();
      n10.addNode(n13);
      n9.addNode(n10);
    }
    n9.nodes.trimToSize();
    {if (true) return new PrimaryExpression(n0, n9);}
    throw new Error("Missing return statement in function");
  }

  final public AttributeSelector AttributeSelector() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARMY:
      n2 = jj_consume_token(ARMY);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 11);
      break;
    case UNIT:
      n4 = jj_consume_token(UNIT);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 11);
      break;
    case EQUIPMENT:
      n6 = jj_consume_token(EQUIPMENT);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 11);
      break;
    case MEMBERS:
      n8 = jj_consume_token(MEMBERS);
      n7 = JTBToolkit.makeNodeToken(n8);
      n0 = new NodeChoice(n7, 3, 11);
      break;
    case UPGRADES:
      n10 = jj_consume_token(UPGRADES);
      n9 = JTBToolkit.makeNodeToken(n10);
      n0 = new NodeChoice(n9, 4, 11);
      break;
    case COST:
      n12 = jj_consume_token(COST);
      n11 = JTBToolkit.makeNodeToken(n12);
      n0 = new NodeChoice(n11, 5, 11);
      break;
    case SLOTS:
      n14 = jj_consume_token(SLOTS);
      n13 = JTBToolkit.makeNodeToken(n14);
      n0 = new NodeChoice(n13, 6, 11);
      break;
    case TYPE:
      n16 = jj_consume_token(TYPE);
      n15 = JTBToolkit.makeNodeToken(n16);
      n0 = new NodeChoice(n15, 7, 11);
      break;
    case UNITS:
      n18 = jj_consume_token(UNITS);
      n17 = JTBToolkit.makeNodeToken(n18);
      n0 = new NodeChoice(n17, 8, 11);
      break;
    case LINKED:
      n20 = jj_consume_token(LINKED);
      n19 = JTBToolkit.makeNodeToken(n20);
      n0 = new NodeChoice(n19, 9, 11);
      break;
    case IDENTIFIER:
      n22 = jj_consume_token(IDENTIFIER);
      n21 = JTBToolkit.makeNodeToken(n22);
      n0 = new NodeChoice(n21, 10, 11);
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new AttributeSelector(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  BooleanLiteral n5 = null;
  CollectionLiteral n6 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n2 = jj_consume_token(INTEGER_LITERAL);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 4);
      break;
    case STRING_LITERAL:
      n4 = jj_consume_token(STRING_LITERAL);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 4);
      break;
    case TRUE:
    case FALSE:
      n5 = BooleanLiteral();
      n0 = new NodeChoice(n5, 2, 4);
      break;
    case LCP:
      n6 = CollectionLiteral();
      n0 = new NodeChoice(n6, 3, 4);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Literal(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BooleanLiteral BooleanLiteral() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      n2 = jj_consume_token(TRUE);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case FALSE:
      n4 = jj_consume_token(FALSE);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 2);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new BooleanLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public CollectionLiteral CollectionLiteral() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  Expression n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Expression n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
    n1 = jj_consume_token(LCP);
    n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LCP:
    case LP:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 54:
    case 56:
    case 67:
    case 68:
    case 70:
      n5 = new NodeListOptional();
      n3 = new NodeSequence(2);
      n4 = Expression();
      n3.addNode(n4);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_18;
        }
        n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
        n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
        n9 = Expression();
        n6.addNode(n9);
        n5.addNode(n6);
      }
      n5.nodes.trimToSize();
      n3.addNode(n5);
      n2.addNode(n3);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    n11 = jj_consume_token(RCP);
    n10 = JTBToolkit.makeNodeToken(n11);
    {if (true) return new CollectionLiteral(n0, n2, n10);}
    throw new Error("Missing return statement in function");
  }

  final public Reference Reference() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      n2 = jj_consume_token(54);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0.addNode(n1);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    n4 = jj_consume_token(IDENTIFIER);
    n3 = JTBToolkit.makeNodeToken(n4);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 71:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_19;
      }
      n6 = new NodeSequence(2);
      n8 = jj_consume_token(71);
      n7 = JTBToolkit.makeNodeToken(n8);
      n6.addNode(n7);
      n10 = jj_consume_token(IDENTIFIER);
      n9 = JTBToolkit.makeNodeToken(n10);
      n6.addNode(n9);
      n5.addNode(n6);
    }
    n5.nodes.trimToSize();
    {if (true) return new Reference(n0, n3, n5);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public WhadlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[49];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x801400,0x0,0x801400,0xf6b000,0xf6b000,0x1400,0x1400,0x805000,0x0,0x805000,0x0,0x400,0x400,0x0,0x2aa000,0x2aa000,0x0,0x0,0x40000000,0x0,0x0,0x20000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x80000000,0x0,0x2176e00,0x80000000,0x80000000,0x0,0x80000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x300,0x0,0x400000,0x0,0x0,0x400000,0x0,0x0,0x400000,0x80,0x0,0xc92800,0x810000,0x0,0x810000,0x14d2201,0x2000000,0x8000000,0x10000000,0x60000000,0x60000000,0x80000000,0x80000000,0x0,0x0,0x800000,0x800000,0x7c,0x7c,0x0,0x4d2201,0x4d2201,0x4d2201,0x8000,0x80000,0x50201,0x1,0x80,0x14d2201,0x400000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x58,0x0,0x0,0x0,0x0,0x0,0x7,0x7,0x18,0x18,0x20,0x20,0x0,0x0,0x18,0x58,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x58,0x0,0x80,};
   }

  /** Constructor with InputStream. */
  public WhadlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public WhadlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new WhadlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public WhadlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WhadlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public WhadlParser(WhadlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(WhadlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[72];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 49; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 72; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                          }

class JTBToolkit {

  static NodeToken makeNodeToken(final Token tok) {
    final NodeToken node = new NodeToken(tok.image.intern(), tok.kind, tok.beginLine, tok.beginColumn, tok.endLine, tok.endColumn);
    if (tok.specialToken == null)
      return node;
    final java.util.ArrayList<NodeToken> temp = new java.util.ArrayList<NodeToken>();
    Token t = tok;
    while (t.specialToken != null) {
      t = t.specialToken;
      temp.add(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
    }
    for (int i = temp.size() - 1; i >= 0; --i)
      node.addSpecial(temp.get(i));
    node.trimSpecials();
    return node;
  }
}
